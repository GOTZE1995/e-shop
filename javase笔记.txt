1.以公共类为名字 
2.jvm Java虚拟机  源文件 字节码文件 
3.jdk java developent kit Java开发工具包
4.jre java runtime environment Java运行时环境 
5.
Java语言中的命名约定：
类和接口名。每个字的首字母大写，含有大小写。
例如，MyClass，HelloWorld，Time等。 
方法名。首字母小写，其余的首字母大写，含大小写。尽量少用下划线。
例如，myName，setTime等。 
常量名。基本数据类型的常量名使用全部大写字母，字与字之间用下划线分隔。对象常量可以大小混些。
例如，SIZE_NAME。 
变量名。可大小写混写，首字符小写，不用下划线，少用美元符号。给变量命名是尽量做到见名知义。
6. 数据类型 {基本类型（整型，浮点型。。。。），引用类型（类，接口，数组，枚举）}
	Java 中的泛型只接受引用类型作为类型参数

7. Java的整型范围 不像c /c++ 与机器有关 而是无关的 

8.Java 的 基 本 的char 类型 被 定 义 成 无 符 号 的16 位， 
它 是Java 中 唯一 的 一 个 无 符 号 类 型。 使 用16 位 字 符 的原 因 是 要 让Java 能 够 支 持 任 何Unicode 字 符，
由 此 使 得Java 适 用 于 描 述 或 显 示 任 何 被Unicode 支 持 的 语 言。

char型（文本型）
用于存放字符的数据类型，占用2个字节，采用unicode编码，它的前128字节编码与ASCII兼容
字符的存储范围在/u0000~/uFFFF，在定义字符型的数据时候要注意加' '，比如 '1'表示字符'1'而不是数值1，
char c = ' 1 ';
我们试着输出c看看，System.out.println(c);结果就是1，而如果我们这样输出呢System.out.println(c+0);
结果却变成了49。
如果我们这样定义c看看
char c = ' /u0031 ';输出的结果仍然是1，这是因为字符'1'对应着unicode编码就是/u0031

9. final 设置常量  instanceof 检查对象是否是某种类型 

10. 4++ 是非法的操作   ++ 操作数不是数值 

11. 逻辑运算符 也是使用“短路原则”

12. byte→ short→ (char)→ int→long→float→ double
      byte，short, char之间不会相互转换，他们三者在计算时首先转换为 int 类型

13.标识符就是用于给 Java 程序中变量、类、方法等命名的符号。













final 修饰的类 不允许被继承 
	修饰的常量 不许被修改
	修饰的方法 不许被重写
1.排序的时间复杂度，链表

2.什么叫编译型的语言 ---》 直接编译成 操作系统可以直接认识的可执行文件格式  
3.JAVA是解释型语言 
4.JAVA 核心机制--垃圾收集,虚拟机（jvm）
5.JAVA -VERSION 
6.标识符  --- 字母 下划线 美元符号 数组 组成 
7.变量先声明再赋值 
8.内存管理  - - 代码区 （存放代码） 静态区 （静态变量 字符串常量） 栈（局部变量 ）  堆（new出来）
9.数据类型 ：  基本数据类型---->整数类型（int byte short long ） 浮点类型 ( float double ) 字符型（char） 布尔型 （boolean）
	      引用数据类型----->类 接口 数组 
10. boolean 类型 只允许取值为 true false 不能用数字代替~  和C 不同 
11. char采用 unicode 编码 每个字符占两个字节 用十六进制 编码形式表示 
12. java 允许使用 转义字符 \  "\u0061"-->a
13. java 各个整数,浮点类型类型 有固定表述范围  int就占4字节  不像C语言根据操作系统不一样 而改变 
14. 声明 long 是 后面 必须加L  EXP: long i = 888888888L ; java 整型常量 默认为 int 
15. 声明 float 时 后面必须加F exp: float i = 3.1111111F; 
16.浮点数 是有一定误差的 
17. byte short char 互相之间不会转换 如何进行混合计算 先都转换为 Int 
18. 容量大的像容量小的 转换 char->int->long->float->double 
19. 当进行打印时，无论什么类型 都会转换成 字符串类型进行打印 
20.实数 默认是 double 整数默认是 int 
21.java switch只能探测到 int型 （能转换成 Int型的就可以 ）
22.抽象类不能实例化
	this 是Java的一个关键字，表示某个对象自身。通过this可以使用当前对象的成员变量和方法。
	this只能用于方法内。当一个对象创建后，Java虚拟机就会给这个对象分配一个引用自身的对象，这个对象的名字就是 this。
	this只和特定的对象关联，而不和类关联，同一个类的不同对象有不同的this。
	this只能在类中的非静态方法中使用，静态方法和静态的代码块中绝对不能出现this。
	表示对当前对象的引用。
	表示用类的成员变量，而非函数参数，注意在函数参数和成员变量同名是进行区分。
	用于在构造方法中引用满足指定参数类型的构造器（其实也就是构造方法）。但是这里必须非常注意：只能引用一个构造方法且必须位于开始。
	this不能用在static方法中。

23.  throwable----error(系统错误)
	       -----exception（可以处理的异常）-------runtimeException(可以不用捕捉它 可以处理可以不处理的)
				           -------可以被catch的exception （一般都是用逮他）exp：filenotfoundexception IOException	
24. finally 作用  一个统一的出口 进行资源清除的工作（关闭打开的文件 和删除临时文件） 

25.java 例外处理机制 使得例外事件 沿着被调用的顺序往前寻找，只要找到符合该 例外的	种类的例外处理程序 
26.throws 抛出异常时 尽量详细 ~ 就算包含的也要写出来 IOEception包含 filenoteception  但是调用 fileinputstream 时抛出都写 

27.基类异常捕获的语句 不能写在子类异常的捕获语句上面 

28.throws 是一个声明，声明是为了别的方法调用的时候可以直接看到该方法所有的异常，
    throw 是一个动作，这个动作就是真正的想jvm一样抛出一个异常的动作；  
    总结：throw一个必须在函数后面throws声明一下；反过来则大可不必

29.重写方法 抛出的异常 要与 原方法抛出的异常 一致 不能范围大了 也不能范围太小 

30.容器： 1136 一个图 一个类 3个知识点 6个接口   容器的API都位于 java.util 

Set: 没有顺序 不可以重复 
List：有顺序 可以重复 ----什么叫重复：互相equals 相同就算重复  
容器只能添加对象，不能添加基础的引用类型~

父类的引用 实例化子类的对象时 只能访问父类的方法 如果访问子类的方法 需要加强制转换~  

两个对象如果equals 两个对象的hashcode 是相等的 

容器类对象 调用 remove contains 等方法时 需要比较对象是否相等 这会涉及到 对象类型的equals 和 hashCode 方法

iterator 统一的遍历所有 collection 接口的方法 //// 不会！！！

多态实现的三个条件： 继承  重写 父类引用指向子类对象 

对于自定义类型，需要重写 equals 和 hashCode 方法 以实现 自定义对象 相等的规则  

important： 相等对象应具有相等的hash codes 

作为字典的索引：会使用hashcode 方法 （一对一对的存的时候）

重写对象 equals 方法 必须重写对象 hashcode（） 方法
 
容器中：记住一个类： java.util.Collections 

用到集合时尽量用泛型 {
	如何定义 ：定义collection 的时候指定 + 循环时 用 iterator 指定 ；
}
所有可以进行“排序”的类 都实现了 java.lang.Comparable 接口 Comparable 接口 只有一个方法 

如何选择数据结构：
	Array 读快改慢   Linked 改快读慢  Hash 两者之间 

二叉树适合 做索引 

自动的解包 装包 


总结： 1136  一个图 一个类（collections） 三个知识点（FOR GENERIC AUTO-BOXING /UNBOXING）
	六个接口 ： collection set list map iterator comparable 


31.  面向对象：考虑问题 不应该 考虑 哪部哪部 应该先考虑 1. 有哪些类 2.类有哪些属性和方法 3 .类和类之间的关系

      关系种类： 关联关系 继承关系 聚合关系 实现关系

     分析都有哪些类时： 重点找名词 
	面向对象优点： 重用可扩展~ 
	成员变量 JAVA 默认初始化~  
	局部变量不可以 
	JAVA 语言除了 基本数据类型之外 都是引用类型的  JAVA 的对象是通过引用对其操作的 
	值传递  基本类型是传递数值本身 引用类型 是传递的是 对象的引用而不是对象本身  

32. this 指向当前对象引用 

33.static 声明的成员变量 为该类的公共变量 第一次使用初始化 对于该类所有对象来说static 成员变量只有一份

  访问方法  类名.方法  和对象的引用 
    字符串常量：在代码区里 

    static 方法 不能访问  非 static 的成员变量

34. package 和 import 语句 

	java 编译器 找包时package 其实是找对应的系统下的文件夹/...
	同一个包下的 public class 是公用的~ 不用加import 
	该类的class文件要位于正确的位置 
	.java 的源文件 是对编译有影响的
	class 文件的最上层的包的父目录的路径在 classpath下 
	cmd 执行一个类 写全包名 
	包含： lang 包含一些核心类 math String integer system thread （不需要引用 其他的jdk的包必须引入）
		awt 抽象窗口工具集的多个类 
		util 包含一些工具类 定义系统特性 使用与日期日历相关函数

	如何打包成 jar 包  jar -cvf text.jar(取名字) *.*
	jar包 打好后~ 可以把路径放到classpath 里面 这样就可以 用jar包里面所有的类 

35. 访问控制 
	java 只允许单继承 
	this是当前对象的引用  super当前对象的父类引用  

36. 子类继承
	在子类中用 super 调用 基类的构造方法 
	使用this 调用本类的另外的构造方法 

	***如果调用了super 必须写在子类构造方法的第一行
	如果没super 子类调用 无参的基类构造方法 	

37 object
	getclass 拿到的是编译好的class文件 

38  equals 

	== 比较地址  对于对象 （是不是指向同一对象）

39 casting(对象转型)
	instanceof 判断 

40 动态绑定~（核心）
	多态的三个必要条件： 要有继承  要有重写 父类引用指向子类对象

41  抽象类 
	abstract 关键字修饰  
	不能实例化 
	当一个类含有抽象方法 就得设为抽象类 
	抽象类没法进行实例化 

42 final 关键字 
	final的值 不能被改变
	final 的方法不能被重写
	final 的类 不能被继承  

43 接口 interface 
	是 抽象方法 和 常量值的定义  的集合
	接口本质上是一个抽象类~ 
	特性{

	接口可以多重实现 
	接口声明的属性 默认为 public static final 也只能是 public static final 
	接口只能定义抽象方法  而且这些方法 默认为public  也只能是public  
	接口可以继承其他接口 并添加新的属性和方法~ 
}

	与继承关系类似 接口与实现类之间存在多态性 	

44 String 
	java.lang.String 代表++++不可变++++的字符序列
	String （byte[] bytes）---> 用于字节编码的转换 
	方法记得大概 ----》去查API
	
	重载方法{
	
	Stringbuffer 是可变字符序列~  
} 

45. 调试的时候 打印一些东西 检验 

46. FILE类（java.io.file）(代表系统文件名（路径和文件名）){

	listfile 函数 将子文件的名字保存到数组 
	记住用正斜杠 /////////////////////////////////////////
}


47.IO{

	类型：输入输出流  节点流处理流  文件流 缓冲流 数据流 转换流 print流 object流 
	Unicode：一个字符：两个字节 ---》java上就是这样 
	stream结尾的-->都是字节流   

	java中：汉字都是两个字节--》一个字符 
	
	处理流{
		缓冲流{
			bufferReader 提供了readline方法 用于读取一行字符串（\r or \n 分隔）
			bufferWriter 提供了 newline 方法 用于写入一个 行分隔符 
			使用 flush 方法 可以将缓存的数据 直接写入 
		}
		转换流{
			
			OutputStreamWriter
			InputStreamReader ----》普遍包装一个bufferedReader 调用 readline方法 
		}
		
		数据流{
			
			DateOutputStream DateInputStream   先进去的先读出来 
			提供了可以存取与机器无关的java原始数据类型 （int float） 的方法 
		}
		long 8个字节~ 
		UTF-8 比较省空间 
		打印流{

			print 流~ （不会往外抛出异常~用户通过检测错误状态获取错误信息 
				   有自动的flush功能）
		}
		Object流（序列化~ ---》直接转换成字节流 ）{
			直接将object 写入或者读出~ 
			transient关键字 --> transient k 相当于k是透明的 序列化时不考虑  
			标记型接口 serializable 接口 系列化 -----》 class implements serializable{} 
			externalizable 接口  外部化  可以控制如何序列化
			ObjectOut/InputStream
			 
		}
		总结：{
			
		}
	}


}



48 线程{

	线程：是一个程序里面不同的执行路径 
	进程：静态概念 
	java.lang.thread
	main---》主线程
	创建方法{
		1.创建thread实例 （ｅｘｔｅｎｓ　thread ）创建新的线程 
		2.定义一个线程类实现ｒｕｎｎａｂｌｅ接口　
	}
	每个线程都是通过某个特定的thread对象所对应的方法run()来完成操作的，方法run()称为线程体
	通过调用thread类的ｓｔａｒｔ（）方法启动一个线程
	线程启动必须调用　ｔｈｒｅａｄ类的ｓｔａｔ（）方法；

	sleep ---------》静态方法 可以直接调用 的方法{
		
		重写方法 不能抛出比被重写方法 不同的异常 
		在哪个线程里调用sleep方法就让哪个线程睡眠 

	}

	立一个flag  关闭线程~  
	currentThread 拿到当前线程 
	public synchronized void add(string name) 执行方法过程中 当前对象被锁定
	
	同步方法只同步方法里面的 
	但是其他方法会影响同步方法的~(线程视频 线程同步5) 
	
	两个方法改一个值 是需要加同步的~ 

	生产者和消费者问题~  
	带有synchronized 的才可以才 wait() ---》和notify()――》叫醒 一个 成对出现 
	 wait后锁就不归我所有，得等人叫醒 而sleep() 睡着了还抱着锁 还在锁定
	notifyAll ---》叫醒 多个相同的线程 
	
	wait时 别的线程 可以访问锁定对象 ---------》调用wait时 必须锁定该对象 
	sleep时 别的线程 不可以访问锁定对象 
	
		
}	


49. 网络编程 {
	网络通信协议
	网络通信接口{
		硬件设置
		软件设置
	}
	通信协议分层思想 （分层思想很重要）
	iso模型：7层
	TCP/IP模型：4层（物理+数据链路层/网络层/传输层/应用层）
	数据封装 
	数据拆封 
	
	ip协议 （网络层的主要协议）----》提供了ip独一无二的地址   网络ID号 主机号~ ABC类地址 子网掩码~ 分子网
	ipv6 8个字节
	网关一般有2块网卡（一块网卡可以配多个IP地址了）
	icmp层协议
	TCP/UDP{
		tcp连接是字节流 而且可靠 
		udp 无需建立连接 不可靠传输 （可以丢包）
		
	}
	socket（插座~）{
		socket（client 端的插座）
		severSocket（TCP服务器端的插座）--》用来实现TCP连接的
		端口号：2个字节 --》65536 端口号~ 区分应用程序的 自己用1024以上的~ 
		SMTP邮件端口~ 发25 收110 
		FTP：21端口
		端口号 分为tcp端口 和udp 端口 
		首先启动server 再启动 client 
		serverSocket---》阻塞式的  必须accept（）方法 才可以建立连接  
		127.0.0.1 本机 
		readUTF（）也是阻塞式的~
		关闭SOCKET 也就关闭它的socket的 intputStream 和out的~~
		
	}
	输出的字符流（输出的字符数据）：尽量要用 printWriter
	控制台获取流（inputStream）
	输出的一个对象：json xml 
	字符的输入流（只要操作字符数据统一用BufferReader）：尽量用 BufferReader
	PrintWriter 是带缓冲的 缓冲区没满就不写 （，true）
	
	
}	
	！！！！！！！！！！构造函数的异常直接抛出~
50.GUI编程{
	AWT（abstract window toolkit）抽象窗口｛
	Ｃontainer（所有可以显示的元素） 和 Component 两个类~ 
	component――》container  （容纳 component元素 ）{
				window 可以独立显示出来的窗口{
					Frame 窗口 
					dialog 对话框	
				}
				panel 不能显示出来 
			}	
		――》button textarea 
	
｝	
	setlayout(null)--->设置自己布局管理器为空
	panel 可以看做可以容纳component的空间
	          可以拥有自己的布局管理器
	           可以从父类继承过来 
	一般使用继承后的类 不要直接 frame  
	每一个 container都有一个布局管理器对象  setlayout 改变 布局管理器
	
	组件和容器

	布局管理器{
		提供了5种布局管理器 {FlowLayout(  panel默认的布局管理器 水流状 )----》对组件逐行定位 一行排满换行
								--》按原有组件尺寸显示 可以设置组件 行距 间距 
									以及对其方式~
		  BorderLayout（Frame 默认的布局管理器） ---》不指定center加入的部位 默认加入到center区 
						-----》 每个区域只能加入一个组件 如果加入多个会被盖住
						-----》分为五个区域 北南水平动 东西垂直动 中部都动 
		GridLayout  ---》 分成规矩的小格子 --》 GridLayout  （3,4）3行4列 frame.pack()
		CardLayout GridBagLayout}
	}
	事件处理{
		事件监听：ActionEvent----->对应一种工厂模式 observer 设计模式  
		点击事件---implements ActionListener 接口 
		TextField 事件监听 创建文本框对象 
}
	JAVA图形
	WINDOW事件
}

51.反射机制 {
	classloader 的类的加载机制{
		并非一次性加载出来  
		需要的时候加载 
		static 语句块 在加载后执行一次~ 
		{}---》这叫dynamic 语句块 每次new对象都会执行 
	}
	
	classloader 种类{
		JDK内置 classloader{
			bootstrap class loader--->解析核心的API---》
				只有这个classloader 不是用JAVA 写的
				 他会解析Eextesion class loader appliction class loader		
			Eextesion class loader --->解析扩展类 API 
			appliction class loader---> 解析自定义的 api 	
			
			classLoader 有一个 getParent() 方法  拿到父亲的 classloader 	
		}
	}
	
}

			